#include <iostream>

class SinglyLinkedList {
public:
    struct Node {
        int data;
        Node* next;

        Node(int data) : data(data), next(nullptr) {}
    };

    Node* head;

    SinglyLinkedList() : head(nullptr) {}

    ~SinglyLinkedList() {
        clear();
    }

    void addFront(int data) {
        Node* newNode = new Node(data);
        newNode->next = head;
        head = newNode;
    }

    void remove(int data) {
        Node** current = &head;
        while (*current != nullptr) {
            Node* entry = *current;
            if (entry->data == data) {
                *current = entry->next;
                delete entry;
                return;
            }
            current = &entry->next;
        }
    }

    void display() const {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " -> ";
            current = current->next;
        }
        std::cout << "null" << std::endl;
    }

    void clear() {
        Node* current = head;
        while (current != nullptr) {
            Node* next = current->next;
            delete current;
            current = next;
        }
        head = nullptr;
    }
};

int main() {
    SinglyLinkedList list;
    list.addFront(3);
    list.addFront(2);
    list.addFront(1);

    std::cout << "Lista po dodaniu elementów: ";
    list.display();

    list.remove(2);
    std::cout << "Lista po usunięciu elementu (2): ";
    list.display();

    return 0;
}
